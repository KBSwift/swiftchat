@model SwiftChat.Models.Dtos.UserProfileDto
@{
	ViewData["Title"] = "Your Profile";
}

<div class="row">
	<div class="col-md-4">

		<div>
			<h1>@Model.UserName's Account</h1>
		</div>
		<hr />

		<div class="form-floating mb-3">
			<label>Profile Picture</label>

			@if (Model.ProfilePicture != null)
			{
				var base64 = Convert.ToBase64String(Model.ProfilePicture);
				var imgSrc = String.Format("data:image/png;base64,{0}", base64);
				<img src="@imgSrc" alt="Profile Picture" title="Lookin' good!" />
			}
			else
			{
				<img src="~/images/default-profile.png" alt="Default Profile Picture" title="Lookin' default!" />
			}

			<!-- File input for new profile picture - Broken -->
			@* <label>TEST<input type="file" name="ProfilePictureFile" accept="image/*" /></label> *@
		</div>

		<form asp-controller="User" asp-action="UpdateProfileDetails" method="post" id="profileDetailsForm" onsubmit="submitProfileDetails(event)">

			<div>
				<hr /><h3>Profile Details</h3><hr />
			</div>

			<div class="form-floating mb-3">
				<textarea name="Bio" class="profile-detail form-control" id="profileBio" placeholder="" disabled>@Model.Bio</textarea>
				<label class="form-label" for="profileBio">About me</label>
			</div>

			<div class="form-floating mb-3">
				<input type="date" name="DateOfBirth" id="profileBirthday"
					   value="@(Model.DateOfBirth.HasValue && Model.DateOfBirth != DateTime.MinValue ? Model.DateOfBirth.Value.ToString("yyyy-MM-dd") : "")"
					   class="profile-detail form-control" disabled />
				<label class="form-label" for="profileBirthday">Birthday</label>
			</div>

			<button type="button" id="detailEditCancelButton" class="btn btn-primary"
					onclick="toggleEditMode('detailEditCancelButton', 'detailSaveButton', 'profile-detail')">
				Edit
			</button>
			<button type="submit" id="detailSaveButton" class="btn btn-primary" style="display:none">Save Changes</button>
		</form>

		<form asp-controller="User" asp-action="UpdateProfileCredentials" method="post" enctype="multipart/form-data" id="profileCredentialsForm" onsubmit="submitProfileCredentials(event)">
			<div>
				<hr /><h3>Update Credentials</h3><hr />
			</div>

			<div class="form-floating mb-3">
				<!-- Input for NewEmail, name matches UserProfileDto property. Need to update auth. -->
				<input type="email" asp-for="NewEmail" name="NewEmail" value="@Model.Email" class="profile-credential form-control" id="profileEmail" placeholder="" disabled />
				<label class="form-label" for="profileEmail">Email</label>
				<span asp-validation-for="NewEmail" class="text-danger"></span>
			</div>

			<div class="form-floating mb-3">
				<!-- Input for NewPassword, name matches UserProfileDto property -->
				<input type="password" asp-for="NewPassword" name="NewPassword" class="profile-credential form-control" id="profileNewPassword" placeholder="" onkeyup="toggleConfirmPasswordField()" disabled />
				<label class="form-label" for="profileNewPassword">New Password</label>
				<span asp-validation-for="NewPassword" class="text-danger"></span>
			</div>

			<div class="form-floating mb-3" id="confirmPasswordDiv" style="display: none;">
				<input type="password" asp-for="ConfirmNewPassword" name="ConfirmNewPassword" class="profile-credential form-control" id="profileConfirmNewPassword" placeholder="" />
				<label class="form-label" for="profileConfirmNewPassword">Confirm New Password</label>
				<span asp-validation-for="ConfirmNewPassword" class="text-danger"></span>
			</div>

			<div class="form-floating mb-3">
				<!-- Input for CurrentPassword, name matches UserProfileDto property -->
				<input type="password" asp-for="CurrentPassword" name="CurrentPassword" class="profile-credential form-control" id="profileCurrentPassword" placeholder="" disabled required />
				<label class="form-label" for="profileCurrentPassword">Current Password</label>
				<span asp-validation-for="CurrentPassword" class="text-danger"></span>
			</div>

			<button type="button" id="credentialEditCancelButton" class="btn btn-primary"
					onclick="toggleEditMode('credentialEditCancelButton', 'credentialSaveButton', 'profile-credential')">
				Edit
			</button>
			<button type="submit" id="credentialSaveButton" class="btn btn-primary" style="display:none">Save Changes</button>
		</form>

	</div>
</div>

@section Scripts {
	<script>
		// START Async form submission handling

		async function submitProfileDetails(event) {
			event.preventDefault();
			let formData = new FormData(document.getElementById('profileDetailsForm'));
			try {
				let response = await fetch('/User/UpdateProfileDetails', {
					method: 'POST',
					body: formData
				});
				for (let [key, value] of formData.entries()) {
					console.log(key, value);
				}
				if (response.ok) {
					let result = await response.json();
					saveOriginalData('profile-detail');
					showSuccess(result.message);
					toggleEditMode('detailEditCancelButton', 'detailSaveButton', 'profile-detail', false);
				} else {
					const httpError = handleHttpError(response);
					showError(httpError);
				}
			} catch (error) {
				console.error('Error:', error);
				showError('An error occurred while updating profile details.');
			}
		}

		async function submitProfileCredentials(event) {
			event.preventDefault();
			let formData = new FormData(document.getElementById('profileCredentialsForm'));
			try {
				let response = await fetch('/User/UpdateProfileCredentials', {
					method: 'POST',
					body: formData
				});
				if (response.ok) {
					let result = await response.json();
					let currentPasswordField = document.getElementById('profileCurrentPassword');
					let emailField = document.getElementById('profileEmail');
					if (!result.success) {
						showError(result.message);
						currentPasswordField.classList.add('is-invalid');
						return;
					}
					showSuccess(result.message);
					emailField.value = result.data.email;
					toggleEditMode('credentialEditCancelButton', 'credentialSaveButton', 'profile-credential', false);
				} else {
					const httpError = handleHttpError(response);
					showError(httpError);
				}
			} catch (error) {
				console.error('Error:', error);
				showError('An error occurred while updating profile details.');
			}

		}

		// END Async form submission handling

		// START logic for edit to cancel button

		let originalData = {};
		let isDetailEditMode = false;
		let isCredentialEditMode = false;

		document.addEventListener('DOMContentLoaded', function () {
			saveOriginalData('profile-detail');
			saveOriginalData('profile-credential');
		});

		function toggleEditMode(editButtonID, submitButtonId, formClass) {
			let editButton = document.getElementById(editButtonID);
			let submitButton = document.getElementById(submitButtonId);
			let fields = document.getElementsByClassName(formClass);
			let isEditMode = formClass === 'profile-detail' ? isDetailEditMode : isCredentialEditMode;

			if (!isEditMode) {
				editButton.textContent = 'Cancel Changes';
				submitButton.style.display = '';
				enableFields(fields);
				saveOriginalData(formClass);
			} else {
				editButton.textContent = 'Edit';
				submitButton.style.display = 'none';
				disableFields(fields);
				revertToOriginalData(formClass);
				toggleConfirmPasswordField();
			}

			if (formClass === 'profile-detail') {
				isDetailEditMode = !isDetailEditMode;
			} else if (formClass === 'profile-credential') {
				let currentPasswordField = document.getElementById("profileCurrentPassword");
				currentPasswordField.classList.remove('is-invalid');
				isCredentialEditMode = !isCredentialEditMode;
			}
		}

		function enableFields(fields) {
			for (let i = 0; i < fields.length; i++) {
				fields[i].disabled = false;
			}
		}

		function disableFields(fields) {
			for (let i = 0; i < fields.length; i++) {
				fields[i].disabled = true;
				let parentElement = fields[i].closest('.form-group') || fields[i].closest('.form-floating');

				if (parentElement) {
					let errorMessageElement = parentElement.querySelector('.text-danger');
					if (errorMessageElement) {
						errorMessageElement.textContent = '';
					}
				}
			}
		}

		function saveOriginalData(formClass) {
			originalData[formClass] = {};
			let fields = document.getElementsByClassName(formClass);
			for (let field of fields) {
				originalData[formClass][field.name] = field.value;
			}
		}

		function revertToOriginalData(formClass) {
			let fields = document.getElementsByClassName(formClass);
			for (let field of fields) {
				field.value = originalData[formClass][field.name];
			}
		}

		// END logic for edit to cancel button		

		function toggleConfirmPasswordField() {
			let newPassword = document.getElementById('profileNewPassword').value;
			let confirmPasswordDiv = document.getElementById('confirmPasswordDiv');
			if (newPassword.length > 0) {
				confirmPasswordDiv.style.display = 'block';
			} else {
				confirmPasswordDiv.style.display = 'none';
			}
		}
	</script>
}
